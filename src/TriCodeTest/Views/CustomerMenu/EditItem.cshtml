@model TriCodeTest.Models.CustomerMenuViewModels.CartOrderMenuItem
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
}

<style>
    .item-name-caption {
        position: absolute;
        top: 80%;
        width: 100%;
        text-align: center;
        color: white;
        font-size: 2em;
    }
    .featured-item-image {
        max-width: 100%;
        height: auto;
        width: auto\9;
        position: relative;
    }
    .banner-img {
        margin-left: auto;
        margin-right: auto;
        display: block;
        max-width: 100%;
    }
    .ui-li-static.ui-collapsible > .ui-collapsible-heading {
        margin: 0;
    }

    .ui-li-static.ui-collapsible {
        padding: 0;
    }

    .ui-li-static.ui-collapsible > .ui-collapsible-heading > .ui-btn {
        border-top-width: 0;
    }

    .ui-li-static.ui-collapsible > .ui-collapsible-heading.ui-collapsible-heading-collapsed > .ui-btn,
    .ui-li-static.ui-collapsible > .ui-collapsible-content {
        border-bottom-width: 0;
    }
    #remove-item {
        margin-top: 15px;
    }
    #remove-item a {
        font-size: 1.3em;
    }
</style>

@* Edit Item Page *@

<div data-role="page" id="edit-item-page">
    @* Header *@
    <div data-role="header" class="header-navbar">
        <a href="" data-role="button" onclick="goBack()">Cancel</a>
        <h3>
            <a href="#" style="color:inherit;text-decoration:none">Food Order</a>
        </h3>
        <a href="#" onclick="postItem()">Save</a>
    </div>
    @* Main Content *@
    <div role="main" class="ui-content">
        <div id="details-header-row">
            <div class="featured-item-image">
                <div class="item-name-caption">@Model.MenuItem.Name</div>
                <img src="~/images/food-banner.jpeg" class="banner-img" />
            </div>
        </div>
        <ul data-role="listview">
            <li><h4>@Model.MenuItem.Description</h4></li>
            <li data-role="collapsible" data-collapsed="false" data-collapsed-icon="carat-d" data-expanded-icon="carat-u">
                <h2>Size</h2>
                <form id="size-choice">
                    <fieldset data-role="controlgroup" data-type="horizontal">
                        <input type="radio" name="size" id="size-choice-null" value=null 
                               @if (Model.MenuItem.Size == null)
                               {
                                   @:checked="checked"
                               }/>
                        <label for="size-choice-null">No Size</label>
                        <input type="radio" name="size" id="size-choice-small" value=@Size.Small 
                               @if (Model.MenuItem.Size == Size.Small)
                               {
                                   @:checked="checked"
                               }/>
                        <label for="size-choice-small">@Size.Small</label>
                        <input type="radio" name="size" id="size-choice-medium" value=@Size.Medium 
                               @if (Model.MenuItem.Size == Size.Medium)
                               {
                                   @:checked="checked"
                               }/>
                        <label for="size-choice-medium">@Size.Medium</label>
                        <input type="radio" name="size" id="size-choice-large" value=@Size.Large 
                               @if (Model.MenuItem.Size == Size.Large)
                               {
                                   @:checked="checked"
                               }/>
                        <label for="size-choice-large">@Size.Large</label>
                    </fieldset>
                </form>
            </li>
            <li><a href="#" onclick="loadAddonsPage()"><h2>Add-ons</h2></a></li>
            <li><a href="#" onclick="loadIngredientsPage(@JsonConvert.SerializeObject(Model.MenuItem.MenuItemIngredients))"><h2>Ingredients</h2></a></li>
            <li id="remove-item" data-icon="false">
                <a href="#" onclick="removeItem()"><h1 style="text-align:center">Remove Item</h1></a>
            </li>
        </ul>
    </div>
</div>

@* Edit Ingredients Page *@

<div data-role="page" id="edit-ingredient-page">
    @* Header *@
    <div data-role="header" class="header-navbar">
        <a href="#" onclick="dontSaveItemChanges()">Cancel</a>
        <h3>
            <a href="#" style="color:inherit;text-decoration:none">Food Order</a>
        </h3>
        <a href="#" data-rel="back" data-role="button">Save</a>
    </div>
    @* Main Content *@
    <div role="main" class="ui-content">
        <ul data-role="listview">
            @if (Model.MenuItem.MenuItemIngredients != null)
            {
                @foreach (var ing in Model.MenuItem.MenuItemIngredients)
                {
                    <li data-role="collapsible" data-collapsed-icon="carat-d" data-expanded-icon="carat-u">
                        <h2>@ing.Ingredient.Name</h2>
                        <form id="form-ingredient-@ing.Ingredient.Id-choice">
                            <fieldset data-role="controlgroup" data-type="horizontal">
                                <input type="radio" name="ingredient-id-@ing.Ingredient.Id" id="ingredient-choice-normal-@ing.IngredientId" value="@Option.Normal" />
                                <label for="ingredient-choice-normal-@ing.IngredientId">@Option.Normal</label>
                                <input type="radio" name="ingredient-id-@ing.Ingredient.Id" id="ingredient-choice-low-@ing.IngredientId" value="@Option.Low" />
                                <label for="ingredient-choice-low-@ing.IngredientId">@Option.Low</label>
                                <input type="radio" name="ingredient-id-@ing.Ingredient.Id" id="ingredient-choice-none-@ing.IngredientId" value="@Option.None" />
                                <label for="ingredient-choice-none-@ing.IngredientId">@Option.None</label>
                            </fieldset>
                        </form>
                    </li>
                }
            }
        </ul>
    </div>
</div>

@* Edit Addons Page *@

<div data-role="page" id="edit-addons-page">
    @* Header *@
    <div data-role="header" class="header-navbar">
        <a href="#" onclick="dontSaveItemChanges()">Cancel</a>
        <h3>
            <a href="#" style="color:inherit;text-decoration:none">Food Order</a>
        </h3>
        <a href="#" data-rel="back" data-role="button">Save</a>
    </div>
    @* Main Content *@
    <div role="main" class="ui-content">
        <ul data-role="listview">
            @foreach (var addon in Model.ChoiceOfAddons)
            {
                <li>
                    <div class="ui-grid-a">
                        <div class="ui-block-a">
                            <h2>@addon.Name</h2><p>Price: @String.Format("{0:c}", addon.Price)</p>
                        </div>
                        <div class="ui-block-b">
                            <div class="ui-block-b-contents" style="float:right">
                                <form id="form-addon-@addon.Id-choice">
                                    <input type="checkbox" data-role="flipswitch" name="addon-id-@addon.Id" id="addon-choice-@addon.Id"
                                            data-on-text="Yes" data-off-text="No">
                                    @*<select id="addon-choice-@addon.Id" name="addon-id-@addon.Id" data-role="flipswitch">
                                        <option value="no">No</option>
                                        <option value="yes">Yes</option>
                                    </select>*@
                                </form>
                            </div>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>
<div>
    <a asp-action="Index">Back to Cart</a>
</div>


@section Scripts {
    <script>
        /// <var>The model</var>
        var MODEL = @Html.Raw(JsonConvert.SerializeObject(Model));
        /// <var>The item object</var>
        var ItemObject;

        function goBack(){
            /// <summary>
            /// Goes the back to cart.
            /// </summary>
            /// <returns></returns>
            window.location = '@Url.Action("Cart", "CustomerMenu")';
        }

        function dontSaveItemChanges(){
            /// <summary>
            /// Donts the save item changes.
            /// </summary>
            /// <returns></returns>
            window.location = '@Url.Action("EditItem", "CustomerMenu", new { id = Model.MenuItem.Id })';
        }

        function removeItem(){
            /// <summary>
            /// Removes the item.
            /// </summary>
            /// <returns></returns>
            ItemObject = {
                MenuItem : MODEL.MenuItem
            };
            $.ajax({
                url: '@Url.Action("RemoveItem", "CustomerMenu")',
                method: 'POST',
                data: ItemObject,
                success: function(result){
                    console.log(result);
                    if (result){
                        window.location = '@Url.Action("Cart", "CustomerMenu")';
                    } else {
                        location.reload();
                    }
                }
            });
        }

        function postItem(){
            /// <summary>
            /// Posts the item.
            /// </summary>
            /// <returns></returns>
            ItemObject = {
                MenuItem : MODEL.MenuItem,
                AddOns : MODEL.AddOns
            };
            $.ajax({
                url: '@Url.Action("EditItem", "CustomerMenu")',
                method: 'POST',
                data: ItemObject,
                success: function(result){
                    console.log(result);
                    if (result){
                        window.location = '@Url.Action("Cart", "CustomerMenu")';
                    } else {
                        location.reload();
                    }
                }
            });
        }

       
        $("#size-choice").bind("change", function(event, ui){
            /// <summary>
            /// Create size radio button listener to set new size to javascript object of view model
            /// </summary>
            /// <param name="event">The event.</param>
            /// <param name="ui">The UI.</param>
            /// <returns></returns>
            switch ($("input[name=size]:checked").val()){
                case "null":
                    MODEL.MenuItem.Size = null;
                    break;
                case "Small":
                    MODEL.MenuItem.Size = 0;
                    break;
                case "Medium":
                    MODEL.MenuItem.Size = 1;
                    break;
                case "Large":
                    MODEL.MenuItem.Size = 2;
                    break;
            }
            console.log(MODEL.MenuItem.Size);
        })

        
        function loadIngredientsPage(ingredientsList){
            /// <summary>
            /// Loads the ingredients page.
            /// Load page to edit ingredients
            /// </summary>
            /// <param name="ingredientsList">The ingredients list.</param>
            /// <returns></returns>
            console.log(ingredientsList);
            $(":mobile-pagecontainer").pagecontainer("change", "#edit-ingredient-page", {
                transition: 'slide'
            });
        }
        
        $(document).on("pageshow", "#edit-ingredient-page", function() {
            /// <summary>
            /// Before showing page, select the chosen ingredient options on the radio buttons
            /// </summary>
            /// <returns></returns>
            $.each(MODEL.MenuItem.MenuItemIngredients, function(index, ingredient) {
                /// <summary>
                /// the specified index.
                /// </summary>
                /// <param name="index">The index.</param>
                /// <param name="ingredient">The ingredient.</param>
                /// <returns></returns>
                var ingredientNormalChoice = $("#ingredient-choice-normal-" + ingredient.Ingredient.Id);
                var ingredientLowChoice = $("#ingredient-choice-low-" + ingredient.Ingredient.Id);
                var ingredientNoneChoice = $("#ingredient-choice-none-" + ingredient.Ingredient.Id);
                console.log(ingredient.Ingredient.Option);
                switch(ingredient.Ingredient.Option){
                    case 0:
                        ingredientNormalChoice.prop("checked", true).checkboxradio("refresh");
                        break;
                    case 1:
                        ingredientNoneChoice.prop("checked", true).checkboxradio("refresh");
                        break;
                    case 2:
                        ingredientLowChoice.prop("checked", true).checkboxradio("refresh");
                        break;
                }
            });
        });
       
        $.each(MODEL.MenuItem.MenuItemIngredients, function(index, ingredient){
            /// <summary>
            /// Create listeners for each set of radio buttons that set the new ingredient option to javascript object of view model
            /// </summary>
            /// <param name="index">The index.</param>
            /// <param name="ingredient">The ingredient.</param>
            /// <returns></returns>
            $("#form-ingredient-" + ingredient.Ingredient.Id + "-choice").bind("change", function(event, ui){
                /// <summary>
                /// the specified event.
                /// </summary>
                /// <param name="event">The event.</param>
                /// <param name="ui">The UI.</param>
                /// <returns></returns>
                switch ($("input[name=ingredient-id-" + ingredient.Ingredient.Id + "]:checked").val()){
                    case "Normal":
                        ingredient.Ingredient.Option = 0;
                        break;
                    case "None":
                        ingredient.Ingredient.Option = 1;
                        break;
                    case "Low":
                        ingredient.Ingredient.Option = 2;
                        break;
                }
            });
        });

        // Load page to edit addons
        function loadAddonsPage(){
            $(":mobile-pagecontainer").pagecontainer("change", "#edit-addons-page", {
                transition: 'slide'
            });
        }
        
        $(document).on("pageshow", "#edit-addons-page", function() {
            /// <summary>
            /// this instance.
            /// Before showing page, select the chosen addons on the flipswitches
            /// </summary>
            /// <returns></returns>
            var tempAddons = [];
            $.each(MODEL.ChoiceOfAddons, function(index, addon) {
                /// <summary>
                /// the specified index.
                /// </summary>
                /// <param name="index">The index.</param>
                /// <param name="addon">The addon.</param>
                /// <returns></returns>
                $.each(MODEL.AddOns, function(addonIndex, chosenAddon) {
                    /// <summary>
                    /// s the specified addon index.
                    /// </summary>
                    /// <param name="addonIndex">Index of the addon.</param>
                    /// <param name="chosenAddon">The chosen addon.</param>
                    /// <returns></returns>
                    if (chosenAddon.Id == addon.Id) {
                        tempAddons.push(chosenAddon);
                        $("#addon-choice-" + addon.Id).prop("checked", true);
                        $("#addon-choice-" + addon.Id).flipswitch("refresh");
                    }
                });
            });
            MODEL.AddOns = tempAddons;
        });
        
        $.each(MODEL.ChoiceOfAddons, function(index, addon){
            /// <summary>
            /// Create listeners for each addons flipswitch to be adding/removing addons to item
            /// </summary>
            /// <param name="index">The index.</param>
            /// <param name="addon">The addon.</param>
            /// <returns></returns>
            $("#form-addon-" + addon.Id + "-choice").bind("change", function(event, ui){
                /// <summary>
                /// the specified event.
                /// </summary>
                /// <param name="event">The event.</param>
                /// <param name="ui">The UI.</param>
                /// <returns></returns>
                console.log($("input[name=addon-id-" + addon.Id + "]:checked").val());
                if ($("input[name=addon-id-" + addon.Id + "]:checked").val() == "on"){
                    MODEL.AddOns.push(addon);
                } else {
                    MODEL.AddOns.splice(MODEL.AddOns.indexOf(addon), 1);
                }
            });
        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}